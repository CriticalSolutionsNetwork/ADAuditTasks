#
# This template contains the necessary jobs to run PSScriptAnalyzer on the repo and
# report the results.
#

parameters:
- name: 'usePowerShellCore'
  default: true
  type: boolean

steps:
  - task: PowerShell@2
    displayName: 'Install PSScriptAnalyzer'
    inputs:
      pwsh: eq('${{ parameters.usePowerShellCore }}', true)
      errorActionPreference: 'stop'
      targetType: 'inline'
      script: |
        Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Scope CurrentUser -Force -Verbose

  - task: PowerShell@2
    displayName: 'Run Static Code Analysis (PSScriptAnalyzer)'
    inputs:
      pwsh: eq('${{ parameters.usePowerShellCore }}', true)
      errorActionPreference: 'stop'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      targetType: 'inline'
      script: |
        $results = try { Invoke-ScriptAnalyzer -Settings ./PSScriptAnalyzerSettings.psd1 -Path ./ â€“Recurse -ErrorAction Stop } catch { 'Unexpected Error'; $_.Exception.StackTrace; if ($IsCoreCLR) { Get-Error }; throw }
        $results | ForEach-Object { Write-Host "##vso[task.logissue type=$($_.Severity);sourcepath=$($_.ScriptPath);linenumber=$($_.Line);columnnumber=$($_.Column);]$($_.Message)" }

        $null = New-Item -Path ..\ -Name ScriptAnalyzer -ItemType Directory -Force
        ./build/scripts/ConvertTo-NUnitXml.ps1 -ScriptAnalyzerResult $results -Path ../ScriptAnalyzer/test-results.xml

  - task: PublishTestResults@2
    displayName: 'Publish ScriptAnalyzer Test Results'
    inputs:
      testRunTitle: 'Windows Test Results for PSScriptAnalyzer'
      buildPlatform: 'Windows'
      testRunner: NUnit
      testResultsFiles: '../ScriptAnalyzer/test-results.xml'
      failTaskOnFailedTests: true # required to fail build when tests fail
    condition: succeededOrFailed()
